TODO:
3) A pointer on 64bit will be 64 bits, but it might point to an int32_t type.
   Need to decide how to handle these pointer types.
   A size of a pointer is always 64 bits, but the type it points too can be any type or structure.
   Need to preserve 64bit pointer width at the RTL level.
   Probably try assigning a type to the label.
4) Need to move a lot of the functions in dis64.c into the lib, such as the SSA processing etc.
   Move the functions common to dis64 and dis32. 
5) Method to detect types:
   Variables can be "read" and "written" but also touched. "touched" means pointed to but not read or written to.
   A pointer can be printed as a pointer "*local_reg0101" or a reference "&local_stack0105".
   The method used to detect the difference will be based on whether the pointer is a constant or not. Constant in the sense of at that point in the program, it always points to "&local_stack0105". If it is constant, output "&local_stack0105" instead of "*local_reg0101".
6) Method to help detect types:
   When an instruction does something to a pointer, store details regarding what it "touches" with it at that instruction log location.
10) test36.c -O2: Register r0x8 not handled correction.
    The label before and after the IF are different, but they should be the same.
12) Implement/FIX process blocks.
    A process block has a starting point (at a JOIN point, or function start point) , and finished with a JMP (IF for conditional or JMP otherwise)  or RET instruction.
    We will need to implement each IF with two JMPs.
    if ... goto A; else ... goto B
    This will then properly end a process block.
    Also a process block can end at the instruction just before a JOIN point. Maybe we need to add a JMP before each JOIN point.
14) 11,12,13 need to be done before any more work on type detection can be done.
15) Need to implement a method for output that implements a list of containers, with containers of
    different types. I.e.  A normal container, a if...the...else container, a for ( , , ) container.
    Once the node is inside all the different container types, it will be output linearly, and not through multiple branches.
    Normal container:
	just a list of instructions.
    if-then-else container:
	the "if" expression.
	the list of instructions if true.
		This could be a list of containers.
	the list of instructions if false.
		This could be a list of containers.
    for() container:
	the initial state instructions
		This could be a list of containers.
	the conditional expression
		This could be a list of containers.
	the body of the for loop.
		This could be a list of containers.

2) Might need to separate out types. One index into the type/struct, and another for the pointer or not.
   Also have a separate out for if it is likely to be signed or unsigned int
    

WIP
16) Turn the LLVM instruction decoder into a Class.
17) Build an intermediate instruction so we can generallise the final conversion to RTL.
E.g. Binary -> MCInst -> Low_Level_Inst -> RTL -> LLVM IR
Binary -> MCInst 1:1
MCInst ->  Low_Level_Inst 1:1
Low_Level_Inst -> RTL 1:Many
RTL -> LLVM IR 1:1

Need to decide if it is better to go straight from MCInst -> LLVM IR.
The advantage of the Low_Level_Inst intermediate step is that it is slightly higher than MCInst, but not quite RTL.
E.g. All the different MCInst ADD instructions are generalised into a single Low_Level_Inst ADD.





DONE
1) For call(), need to search back for the local_regNNNN name, from the param_regNNNN in the function params.
7) test36.c causes dis64 to segfault
8) a CMP with one input being a reg PARAM causes a problem with non registration of the register PARAM.
9) test36.c (-O2) causes   if (param_reg0040 == 0x2) IF goto label7f93;  i.e. The label is wrong.
11) Need to implement a dominator tree in order to fix 10).
13) Implement loop detection. How? Done with the path listing method. Any unique path that touches itself is a loop path.

TODO: test91.c
4: 8b 05 00 00 00 00   mov    0x0(%rip),%eax        # a <test91+0xa>
6:                     R_X86_64_PC32  value1-0x4


